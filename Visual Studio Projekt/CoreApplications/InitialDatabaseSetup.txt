
-- Create Initial Tables
CREATE TABLE `customers` (
	`id` INT NOT NULL AUTO_INCREMENT,
	`name` varchar(20) NOT NULL UNIQUE,
	`contact_person` INT,
	`phone` varchar(20) NOT NULL,
	`email` varchar(50) NOT NULL,
	PRIMARY KEY (`id`)
);

CREATE TABLE `customer_users` (
	`id` INT NOT NULL AUTO_INCREMENT,
	`first_name` varchar(20) NOT NULL,
	`last_name` varchar(20) NOT NULL,
	`customer` INT NOT NULL,
	`phone` varchar(20),
	`email` varchar(50) NOT NULL,
	PRIMARY KEY (`id`)
);

CREATE TABLE `cases` (
	`id` INT NOT NULL AUTO_INCREMENT,
	`short_description` varchar(100) NOT NULL,
	`description` TEXT NOT NULL,
	`customer` INT NOT NULL,
	`customer_user` INT,
	`case_employee` INT NOT NULL,
	`status` INT NOT NULL,
	`time_spent` FLOAT(4),
	`hidden_information` TEXT,
	PRIMARY KEY (`id`)
);

CREATE TABLE `employees` (
	`id` INT NOT NULL AUTO_INCREMENT,
	`first_name` varchar(20) NOT NULL,
	`last_name` varchar(20) NOT NULL,
	`phone` varchar(20),
	`email` varchar(50) NOT NULL,
	PRIMARY KEY (`id`)
);

CREATE TABLE `status` (
	`id` INT NOT NULL AUTO_INCREMENT,
	`title` varchar(30) NOT NULL UNIQUE,
	PRIMARY KEY (`id`)
);

-- Table Relations 
ALTER TABLE `customers` ADD CONSTRAINT `customers_fk0` FOREIGN KEY (`contact_person`) REFERENCES `customer_users`(`id`);

ALTER TABLE `customer_users` ADD CONSTRAINT `customer_users_fk0` FOREIGN KEY (`customer`) REFERENCES `customers`(`id`);

ALTER TABLE `cases` ADD CONSTRAINT `case_fk0` FOREIGN KEY (`customer_user`) REFERENCES `customer_users`(`id`);

ALTER TABLE `cases` ADD CONSTRAINT `case_fk1` FOREIGN KEY (`case_employee`) REFERENCES `employees`(`id`);

ALTER TABLE `cases` ADD CONSTRAINT `case_fk2` FOREIGN KEY (`status`) REFERENCES `status`(`id`);

ALTER TABLE `cases` ADD CONSTRAINT `case_fk3` FOREIGN KEY (`customer`) REFERENCES `customers`(`id`);

-- Stored Procedures
DELIMITER $$
CREATE PROCEDURE create_customer
(IN name VARCHAR(20),phone VARCHAR(20),email VARCHAR(50))
BEGIN
    INSERT INTO customers (customers.name, customers.phone, customers.email) VALUES (name,phone,email);
END $$

CREATE PROCEDURE create_customer_user
(IN fname VARCHAR(20),lname VARCHAR(20),customer INT, phone VARCHAR(20), email VARCHAR(50))
BEGIN
    INSERT INTO customer_users (customer_users.first_name, customer_users.last_name, customer_users.customer, customer_users.phone, customer_users.email) VALUES (fname,lname,customer,phone,email);
END $$

CREATE PROCEDURE create_employee
(IN fname VARCHAR(20),lname VARCHAR(20), phone VARCHAR(20), email VARCHAR(50))
BEGIN
    INSERT INTO employees (employees.first_name, employees.last_name, employees.phone, employees.email) VALUES (fname,lname,phone,email);
END $$

CREATE PROCEDURE create_status
(IN title VARCHAR(30))
BEGIN
    INSERT INTO status (status.title) VALUES (title);
END $$

CREATE PROCEDURE create_case
(IN short_description VARCHAR(100), description TEXT, customer_user INT, case_employee INT, status INT)
BEGIN
    INSERT INTO cases (cases.short_description, cases.description, cases.customer_user, cases.case_employee, cases.status) VALUES (short_description,description,customer_user,case_employee,status);
END $$

CREATE PROCEDURE update_case
(IN id INT, short_description VARCHAR(100), description TEXT, customer_user INT, case_employee INT, status INT, time_spent FLOAT(4), hidden_information TEXT)
BEGIN
    UPDATE cases SET cases.short_description=short_description, cases.description=description, cases.customer_user=customer_user, cases.case_employee=case_employee, cases.status=status, cases.time_spent=time_spent, cases.hidden_information=hidden_information WHERE cases.id=id;
END $$

CREATE PROCEDURE update_customer
(IN id INT, name VARCHAR(20), contact_person INT, phone VARCHAR(20), email VARCHAR(50))
BEGIN
    UPDATE customers SET customers.name=name, customers.contact_person=contact_person, customers.phone=phone, customers.email=email WHERE customers.id=id;
END $$

CREATE PROCEDURE update_customer_contact_person
(IN id INT, contact_person INT)
BEGIN
    UPDATE customers SET customers.contact_person=contact_person WHERE customers.id=id;
END $$

CREATE PROCEDURE update_customer_user
(IN id INT, fname VARCHAR(20), lname VARCHAR(20), phone VARCHAR(20), email VARCHAR(50))
BEGIN
    UPDATE customer_users SET customer_users.first_name=fname, customer_users.last_name=lname, customer_users.phone=phone, customer_users.email=email WHERE customer_users.id=id;
END $$

CREATE PROCEDURE update_employee
(IN id INT, fname VARCHAR(20), lname VARCHAR(20), phone VARCHAR(20), email VARCHAR(50))
BEGIN
    UPDATE employees SET employees.first_name=fname, employees.last_name=lname, employees.phone=phone, employees.email=email WHERE employees.id=id;
END $$

CREATE PROCEDURE delete_customer_user
(IN id INT)
BEGIN
    DELETE FROM customer_users WHERE customer_users.id=id;
END $$

CREATE PROCEDURE delete_case
(IN id INT)
BEGIN
    DELETE FROM cases WHERE cases.id=id;
END $$

CREATE PROCEDURE get_case
(IN id INT)
BEGIN
    SELECT * FROM cases WHERE cases.id=id;
END $$

CREATE PROCEDURE get_customer_user
(IN id INT)
BEGIN
    SELECT * FROM customer_users WHERE customer_users.id=id;
END $$

CREATE PROCEDURE get_customer
(IN id INT)
BEGIN
    SELECT * FROM customers WHERE customers.id=id;
END $$

CREATE PROCEDURE get_employee
(IN id INT)
BEGIN
    SELECT * FROM employees WHERE employees.id=id;
END $$

CREATE PROCEDURE get_status
(IN id INT)
BEGIN
    SELECT * FROM status WHERE status.id=id;
END $$

CREATE PROCEDURE get_all_status
()
BEGIN
    SELECT * FROM status;
END $$

CREATE PROCEDURE get_all_cases
()
BEGIN
    SELECT * FROM cases;
END $$

CREATE PROCEDURE get_all_customer_users
()
BEGIN
    SELECT * FROM customer_users;
END $$

CREATE PROCEDURE get_all_customers
()
BEGIN
    SELECT * FROM customers;
END $$

CREATE PROCEDURE get_all_employee
()
BEGIN
    SELECT * FROM employees;
END $$
DELIMITER ;